#include "gui.h"
#include "neovia.h"
#include <algorithm>
#include <cmath>

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π GUI
std::unique_ptr<NEOVIA_GUI> g_gui;

NEOVIA_GUI::NEOVIA_GUI() 
    : currentState(GUIState::MainMenu)
    , previousState(GUIState::MainMenu)
    , sideMenuVisible(false)
    , overlayVisible(false)
    , sideMenuAnimation(0.0f)
    , config(nullptr) {
}

NEOVIA_GUI::~NEOVIA_GUI() {
    shutdown();
}

bool NEOVIA_GUI::initialize(Config* cfg) {
    config = cfg;
    
    // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞–Ω–µ–ª–∏
    backgroundPanel = std::make_unique<Panel>(
        Rect{0, 0, SCREEN_WIDTH, SCREEN_HEIGHT}, 
        Color(COLOR_BACKGROUND)
    );
    
    // –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å (–ª–µ–≤–∞—è —á–µ—Ä–Ω–∞—è –ø–æ–ª–æ—Å–∞)
    sidebarPanel = std::make_unique<Panel>(
        Rect{0, 0, SIDEBAR_WIDTH, SCREEN_HEIGHT}, 
        Color(COLOR_PANEL)
    );
    
    // –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å (—á–µ—Ä–Ω–∞—è –ø–æ–ª–æ—Å–∞ –≤–Ω–∏–∑—É)
    bottomPanel = std::make_unique<Panel>(
        Rect{0, SCREEN_HEIGHT - BOTTOM_PANEL_HEIGHT, SCREEN_WIDTH, BOTTOM_PANEL_HEIGHT}, 
        Color(COLOR_PANEL)
    );
    
    createMainMenuUI();
    return true;
}

void NEOVIA_GUI::shutdown() {
    // –û—á–∏—â–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    backgroundPanel.reset();
    sidebarPanel.reset();
    bottomPanel.reset();
    overlayPanel.reset();
    
    enhanceButton.reset();
    hamburgerButton.reset();
    settingsButton.reset();
    aboutButton.reset();
    
    titleText.reset();
    statusText.reset();
}

void NEOVIA_GUI::createMainMenuUI() {
    // –ö–Ω–æ–ø–∫–∞ –≥–∞–º–±—É—Ä–≥–µ—Ä –º–µ–Ω—é (3 –ø–æ–ª–æ—Å–∫–∏ –≤ –ª–µ–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É)
    hamburgerButton = std::make_unique<Button>(
        Rect{10, 10, 60, 40},
        "‚ò∞", // Unicode —Å–∏–º–≤–æ–ª –≥–∞–º–±—É—Ä–≥–µ—Ä –º–µ–Ω—é
        [this]() { onHamburgerPressed(); }
    );
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ "–ì–ª–∞–≤–Ω–∞—è" —Å –∏–∫–æ–Ω–∫–æ–π –¥–æ–º–∏–∫–∞ –≤ –Ω–∏–∂–Ω–µ–π –ø–∞–Ω–µ–ª–∏
    titleText = std::make_unique<TextElement>(
        Point{SCREEN_WIDTH / 2.0f - 50, SCREEN_HEIGHT - 40},
        "üè† –ì–ª–∞–≤–Ω–∞—è"
    );
    
    // –ì–ª–∞–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ "–£–ª—É—á—à–∏—Ç—å" –ø–æ —Ü–µ–Ω—Ç—Ä—É —ç–∫—Ä–∞–Ω–∞
    enhanceButton = std::make_unique<Button>(
        Rect{SCREEN_WIDTH / 2.0f - BUTTON_WIDTH / 2.0f, 
             SCREEN_HEIGHT / 2.0f - BUTTON_HEIGHT / 2.0f - 50, 
             BUTTON_WIDTH, BUTTON_HEIGHT},
        "–£–ª—É—á—à–∏—Ç—å",
        [this]() { onEnhancePressed(); }
    );
    
    // –°—Ç–∞—Ç—É—Å —Ç–µ–∫—Å—Ç
    statusText = std::make_unique<TextElement>(
        Point{SCREEN_WIDTH / 2.0f - 100, SCREEN_HEIGHT / 2.0f + 50},
        "–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"
    );
}

void NEOVIA_GUI::createSideMenu() {
    if (overlayVisible) return;
    
    // –°–æ–∑–¥–∞–µ–º –æ–≤–µ—Ä–ª–µ–π –ø–∞–Ω–µ–ª—å (–∑–∞—Ç–µ–º–Ω–µ–Ω–∏–µ —Ñ–æ–Ω–∞)
    overlayPanel = std::make_unique<Panel>(
        Rect{0, 0, SCREEN_WIDTH, SCREEN_HEIGHT}, 
        Color(0x80000000) // –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —á–µ—Ä–Ω—ã–π
    );
    
    // –ü–∞–Ω–µ–ª—å –±–æ–∫–æ–≤–æ–≥–æ –º–µ–Ω—é
    float menuWidth = 300;
    auto menuPanel = std::make_unique<Panel>(
        Rect{0, 0, menuWidth, SCREEN_HEIGHT}, 
        Color(COLOR_PANEL)
    );
    
    // –õ–æ–≥–æ—Ç–∏–ø NEOVIA –≤–≤–µ—Ä—Ö—É –º–µ–Ω—é
    auto logoText = std::make_unique<TextElement>(
        Point{20, 50},
        "NEOVIA v1.0.0"
    );
    
    // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
    auto separatorPanel = std::make_unique<Panel>(
        Rect{20, 100, menuWidth - 40, 2}, 
        Color(COLOR_TEXT_GRAY)
    );
    
    // –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    settingsButton = std::make_unique<Button>(
        Rect{20, 130, menuWidth - 40, 50},
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
        [this]() { onSettingsPressed(); }
    );
    
    // –ö–Ω–æ–ø–∫–∞ "–û –Ω–∞—Å"
    aboutButton = std::make_unique<Button>(
        Rect{20, 190, menuWidth - 40, 50},
        "‚ÑπÔ∏è –û –Ω–∞—Å",
        [this]() { onAboutPressed(); }
    );
    
    overlayVisible = true;
}

void NEOVIA_GUI::update(float deltaTime) {
    updateAnimations(deltaTime);
}

void NEOVIA_GUI::updateAnimations(float deltaTime) {
    // –ê–Ω–∏–º–∞—Ü–∏—è –±–æ–∫–æ–≤–æ–≥–æ –º–µ–Ω—é
    if (sideMenuVisible && sideMenuAnimation < 1.0f) {
        sideMenuAnimation = std::min(1.0f, sideMenuAnimation + deltaTime * 4.0f);
    } else if (!sideMenuVisible && sideMenuAnimation > 0.0f) {
        sideMenuAnimation = std::max(0.0f, sideMenuAnimation - deltaTime * 4.0f);
        
        if (sideMenuAnimation <= 0.0f) {
            overlayVisible = false;
            overlayPanel.reset();
            settingsButton.reset();
            aboutButton.reset();
        }
    }
}

void NEOVIA_GUI::render() {
    if (!g_graphics) return;
    
    g_graphics->beginFrame();
    
    // –†–µ–Ω–¥–µ—Ä–∏–º –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    switch (currentState) {
        case GUIState::MainMenu:
            renderMainMenu();
            break;
        case GUIState::Settings:
            renderSettings();
            break;
        case GUIState::About:
            renderAbout();
            break;
        default:
            renderMainMenu();
            break;
    }
    
    // –†–µ–Ω–¥–µ—Ä–∏–º –±–æ–∫–æ–≤–æ–µ –º–µ–Ω—é –ø–æ–≤–µ—Ä—Ö –≤—Å–µ–≥–æ
    if (overlayVisible) {
        renderOverlay();
        renderSideMenu();
    }
    
    g_graphics->endFrame();
    g_graphics->present();
}

void NEOVIA_GUI::renderMainMenu() {
    // –§–æ–Ω
    if (backgroundPanel) backgroundPanel->render();
    
    // –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    if (sidebarPanel) sidebarPanel->render();
    
    // –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å
    if (bottomPanel) bottomPanel->render();
    
    // –ö–Ω–æ–ø–∫–∞ –≥–∞–º–±—É—Ä–≥–µ—Ä
    if (hamburgerButton) hamburgerButton->render();
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    if (titleText) titleText->render();
    
    // –ì–ª–∞–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞
    if (enhanceButton) enhanceButton->render();
    
    // –°—Ç–∞—Ç—É—Å
    if (statusText) statusText->render();
}

void NEOVIA_GUI::renderSettings() {
    // –§–æ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if (backgroundPanel) backgroundPanel->render();
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    g_graphics->drawText(
        Point{SCREEN_WIDTH / 2.0f - 50, 100},
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
        Color(COLOR_TEXT_WHITE),
        32.0f
    );
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–∞
    std::string langText = "–Ø–∑—ã–∫: ";
    switch (config->language) {
        case LANG_RU: langText += "–†—É—Å—Å–∫–∏–π"; break;
        case LANG_EN: langText += "English"; break;
        case LANG_UA: langText += "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞"; break;
    }
    
    g_graphics->drawText(
        Point{100, 200},
        langText,
        Color(COLOR_TEXT_WHITE),
        24.0f
    );
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    std::string priorityText = "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ";
    switch (config->priority) {
        case PRIORITY_GRAPHICS: priorityText += "–ì—Ä–∞—Ñ–∏–∫–∞"; break;
        case PRIORITY_PERFORMANCE: priorityText += "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"; break;
        case PRIORITY_BALANCED: priorityText += "–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π"; break;
    }
    
    g_graphics->drawText(
        Point{100, 250},
        priorityText,
        Color(COLOR_TEXT_WHITE),
        24.0f
    );
    
    // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
    g_graphics->drawText(
        Point{100, 350},
        "–ù–∞–∂–º–∏—Ç–µ B –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞",
        Color(COLOR_TEXT_GRAY),
        20.0f
    );
}

void NEOVIA_GUI::renderAbout() {
    // –§–æ–Ω
    if (backgroundPanel) backgroundPanel->render();
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    g_graphics->drawText(
        Point{SCREEN_WIDTH / 2.0f - 50, 100},
        "‚ÑπÔ∏è –û –Ω–∞—Å",
        Color(COLOR_TEXT_WHITE),
        32.0f
    );
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
    g_graphics->drawText(
        Point{100, 200},
        "NEOVIA v1.0.0",
        Color(COLOR_TEXT_WHITE),
        24.0f
    );
    
    g_graphics->drawText(
        Point{100, 240},
        "–ê–≤—Ç–æ—Ä: UNIX228",
        Color(COLOR_TEXT_WHITE),
        20.0f
    );
    
    g_graphics->drawText(
        Point{100, 280},
        "–°–∏—Å—Ç–µ–º–∞ —É–ª—É—á—à–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∏",
        Color(COLOR_TEXT_WHITE),
        20.0f
    );
    
    g_graphics->drawText(
        Point{100, 320},
        "–¥–ª—è Nintendo Switch",
        Color(COLOR_TEXT_WHITE),
        20.0f
    );
}

void NEOVIA_GUI::renderOverlay() {
    if (overlayPanel && sideMenuAnimation > 0.0f) {
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–ª—å—Ñ–∞ –∞–Ω–∏–º–∞—Ü–∏—é
        Color overlayColor = overlayPanel->color;
        overlayColor.a *= sideMenuAnimation;
        
        g_graphics->drawRect(overlayPanel->bounds, overlayColor);
    }
}

void NEOVIA_GUI::renderSideMenu() {
    if (sideMenuAnimation <= 0.0f) return;
    
    float menuWidth = 300 * sideMenuAnimation;
    
    // –ü–∞–Ω–µ–ª—å –º–µ–Ω—é
    g_graphics->drawRect(
        Rect{0, 0, menuWidth, SCREEN_HEIGHT},
        Color(COLOR_PANEL)
    );
    
    if (sideMenuAnimation > 0.8f) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –º–µ–Ω—é –ø–æ—á—Ç–∏ –æ—Ç–∫—Ä—ã—Ç–æ
        // –õ–æ–≥–æ—Ç–∏–ø
        g_graphics->drawText(
            Point{20, 50},
            "NEOVIA v1.0.0",
            Color(COLOR_TEXT_WHITE),
            24.0f
        );
        
        // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        g_graphics->drawRect(
            Rect{20, 100, menuWidth - 40, 2},
            Color(COLOR_TEXT_GRAY)
        );
        
        // –ö–Ω–æ–ø–∫–∏
        if (settingsButton) settingsButton->render();
        if (aboutButton) aboutButton->render();
    }
}

void NEOVIA_GUI::handleInput(u64 kDown, Point touchPos) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    if (kDown & HidNpadButton_B) {
        if (currentState != GUIState::MainMenu) {
            setState(GUIState::MainMenu);
            return;
        }
        if (sideMenuVisible) {
            hideSideMenu();
            return;
        }
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    switch (currentState) {
        case GUIState::MainMenu:
            if (hamburgerButton) hamburgerButton->handleInput(kDown, touchPos);
            if (enhanceButton) enhanceButton->handleInput(kDown, touchPos);
            break;
            
        case GUIState::Settings:
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            if (kDown & HidNpadButton_Left || kDown & HidNpadButton_Right) {
                // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–∞
                if (kDown & HidNpadButton_Left) {
                    config->language = static_cast<Language>((config->language + 2) % 3);
                } else {
                    config->language = static_cast<Language>((config->language + 1) % 3);
                }
                saveConfig(*config);
            }
            break;
            
        case GUIState::About:
            // –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º –≤ —Ä–∞–∑–¥–µ–ª–µ "–û –Ω–∞—Å"
            break;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–∫–æ–≤–æ–≥–æ –º–µ–Ω—é
    if (overlayVisible) {
        if (settingsButton) settingsButton->handleInput(kDown, touchPos);
        if (aboutButton) aboutButton->handleInput(kDown, touchPos);
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
        if (touchPos.x > 300 && (kDown & HidNpadButton_A)) {
            hideSideMenu();
        }
    }
}

void NEOVIA_GUI::setState(GUIState newState) {
    previousState = currentState;
    currentState = newState;
    
    // –°–∫—Ä—ã–≤–∞–µ–º –±–æ–∫–æ–≤–æ–µ –º–µ–Ω—é –ø—Ä–∏ —Å–º–µ–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if (sideMenuVisible) {
        hideSideMenu();
    }
}

void NEOVIA_GUI::showSideMenu() {
    if (!sideMenuVisible) {
        createSideMenu();
        sideMenuVisible = true;
    }
}

void NEOVIA_GUI::hideSideMenu() {
    sideMenuVisible = false;
}

void NEOVIA_GUI::toggleSideMenu() {
    if (sideMenuVisible) {
        hideSideMenu();
    } else {
        showSideMenu();
    }
}

void NEOVIA_GUI::showOverlay() {
    overlayVisible = true;
}

void NEOVIA_GUI::hideOverlay() {
    overlayVisible = false;
}

void NEOVIA_GUI::setStatusText(const std::string& text) {
    if (statusText) {
        statusText->setText(text);
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
void NEOVIA_GUI::onHamburgerPressed() {
    toggleSideMenu();
}

void NEOVIA_GUI::onEnhancePressed() {
    if (onEnhanceClicked) {
        onEnhanceClicked();
    }
}

void NEOVIA_GUI::onSettingsPressed() {
    setState(GUIState::Settings);
    hideSideMenu();
}

void NEOVIA_GUI::onAboutPressed() {
    setState(GUIState::About);
    hideSideMenu();
}

void NEOVIA_GUI::onBackPressed() {
    setState(previousState);
}