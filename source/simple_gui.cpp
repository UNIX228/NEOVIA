#include "simple_gui.h"
#include <stdio.h>
#include <string>
#include "downloader.h"
#include "game_database.h"

SimpleGUI::SimpleGUI() : config(nullptr), selectedMenuItem(0), inSideMenu(false) {}
    
bool SimpleGUI::initialize(Config* cfg) {
    config = cfg;
    return true;
}

void SimpleGUI::render() {
        consoleClear();
        
        if (inSideMenu) {
            renderSideMenu();
        } else {
            renderMainMenu();
        }
        
        consoleUpdate(NULL);
}

void SimpleGUI::renderMainMenu() {
        printf("\x1b[2J\x1b[H"); // –û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞
        printf("\x1b[47m\x1b[30m"); // –°–µ—Ä—ã–π —Ñ–æ–Ω, —á–µ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
        
        // –ò–º–∏—Ç–∞—Ü–∏—è —Å–µ—Ä–æ–≥–æ —Ñ–æ–Ω–∞
        for (int i = 0; i < 45; i++) {
            printf("                                                                                \n");
        }
        
        printf("\x1b[10;35H\x1b[44m\x1b[37m NEOVIA v1.0.0 \x1b[0m\n");
        printf("\x1b[15;30H\x1b[46m\x1b[30m [ –£–ª—É—á—à–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫—É ] \x1b[0m\n");
        printf("\x1b[20;35H\x1b[37m–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ\x1b[0m\n");
        
        // –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å
        printf("\x1b[43;1H\x1b[40m\x1b[37m");
        for (int i = 0; i < 80; i++) printf(" ");
        printf("\x1b[43;35Hüè† –ì–ª–∞–≤–Ω–∞—è\x1b[0m");
        
        // –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
        printf("\x1b[5;5H\x1b[40m\x1b[37m‚ò∞\x1b[0m");
        
        printf("\x1b[45;1H\x1b[37mA - –í—ã–±—Ä–∞—Ç—å  ‚ò∞ - –ú–µ–Ω—é  + - –í—ã—Ö–æ–¥\x1b[0m");
}

void SimpleGUI::renderSideMenu() {
        printf("\x1b[2J\x1b[H"); // –û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞
        
        // –ó–∞—Ç–µ–º–Ω–µ–Ω–Ω—ã–π —Ñ–æ–Ω
        printf("\x1b[40m\x1b[37m");
        for (int i = 0; i < 45; i++) {
            printf("                                                                                \n");
        }
        
        // –ë–æ–∫–æ–≤–æ–µ –º–µ–Ω—é
        printf("\x1b[5;5H\x1b[47m\x1b[30m NEOVIA v1.0.0 \x1b[0m");
        printf("\x1b[7;5H\x1b[37m" "‚îÄ" "‚îÄ" "‚îÄ" "‚îÄ" "‚îÄ" "‚îÄ" "‚îÄ" "‚îÄ" "‚îÄ" "‚îÄ" "‚îÄ" "‚îÄ" "‚îÄ" "‚îÄ" "‚îÄ\x1b[0m");
        
        if (selectedMenuItem == 0) {
            printf("\x1b[9;5H\x1b[46m\x1b[30m ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ \x1b[0m");
        } else {
            printf("\x1b[9;5H\x1b[40m\x1b[37m ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ \x1b[0m");
        }
        
        if (selectedMenuItem == 1) {
            printf("\x1b[11;5H\x1b[46m\x1b[30m ‚ÑπÔ∏è –û –Ω–∞—Å \x1b[0m");
        } else {
            printf("\x1b[11;5H\x1b[40m\x1b[37m ‚ÑπÔ∏è –û –Ω–∞—Å \x1b[0m");
        }
        
        printf("\x1b[45;1H\x1b[37mA - –í—ã–±—Ä–∞—Ç—å  B - –ù–∞–∑–∞–¥  ‚Üï - –ù–∞–≤–∏–≥–∞—Ü–∏—è\x1b[0m");
}

void SimpleGUI::handleInput(u64 kDown) {
        if (inSideMenu) {
            if (kDown & HidNpadButton_Up) {
                selectedMenuItem = (selectedMenuItem - 1 + 2) % 2;
            }
            if (kDown & HidNpadButton_Down) {
                selectedMenuItem = (selectedMenuItem + 1) % 2;
            }
            if (kDown & HidNpadButton_A) {
                if (selectedMenuItem == 0) {
                    showSettings();
                } else if (selectedMenuItem == 1) {
                    showAbout();
                }
            }
            if (kDown & HidNpadButton_B) {
                inSideMenu = false;
                selectedMenuItem = 0;
            }
        } else {
            if (kDown & HidNpadButton_A) {
                enhanceGames();
            }
            if (kDown & HidNpadButton_L) { // L –∫–∞–∫ –≥–∞–º–±—É—Ä–≥–µ—Ä –º–µ–Ω—é
                inSideMenu = true;
                selectedMenuItem = 0;
            }
        }
}

void SimpleGUI::showSettings() {
        printf("\x1b[2J\x1b[H");
        printf("\x1b[5;30H\x1b[46m\x1b[30m ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ \x1b[0m\n\n");
        
        printf("\x1b[10;10H–Ø–∑—ã–∫: ");
        switch (config->language) {
            case LANG_RU: printf("–†—É—Å—Å–∫–∏–π"); break;
            case LANG_EN: printf("English"); break;
            case LANG_UA: printf("–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞"); break;
        }
        
        printf("\x1b[12;10H–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ");
        switch (config->priority) {
            case PRIORITY_GRAPHICS: printf("–ì—Ä–∞—Ñ–∏–∫–∞"); break;
            case PRIORITY_PERFORMANCE: printf("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"); break;
            case PRIORITY_BALANCED: printf("–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π"); break;
        }
        
        printf("\x1b[15;10H–î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: %s", 
               config->dynamicResolution ? "–í–∫–ª—é—á–µ–Ω–æ" : "–í—ã–∫–ª—é—á–µ–Ω–æ");
        
        printf("\x1b[40;1H\x1b[37mB - –ù–∞–∑–∞–¥  ‚Üê ‚Üí - –ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫\x1b[0m");
        consoleUpdate(NULL);
        
        // –ñ–¥–µ–º –≤–≤–æ–¥
        PadState pad;
        padConfigureInput(1, HidNpadStyleSet_NpadStandard);
        padInitializeDefault(&pad);
        
        while (true) {
            padUpdate(&pad);
            u64 kDown = padGetButtonsDown(&pad);
            
            if (kDown & HidNpadButton_B) {
                inSideMenu = false;
                break;
            }
            if (kDown & HidNpadButton_Left) {
                config->language = static_cast<Language>((config->language + 2) % 3);
                saveConfig(*config);
                showSettings(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º
                break;
            }
            if (kDown & HidNpadButton_Right) {
                config->language = static_cast<Language>((config->language + 1) % 3);
                saveConfig(*config);
                showSettings(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º
                break;
            }
        }
}

void SimpleGUI::showAbout() {
        printf("\x1b[2J\x1b[H");
        printf("\x1b[5;30H\x1b[46m\x1b[30m ‚ÑπÔ∏è –û –Ω–∞—Å \x1b[0m\n\n");
        
        printf("\x1b[10;25HNEOVIA v1.0.0\n");
        printf("\x1b[12;25H–ê–≤—Ç–æ—Ä: UNIX228\n");
        printf("\x1b[14;20H–°–∏—Å—Ç–µ–º–∞ —É–ª—É—á—à–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∏\n");
        printf("\x1b[15;22H–¥–ª—è Nintendo Switch\n");
        
        printf("\x1b[40;1H\x1b[37mB - –ù–∞–∑–∞–¥\x1b[0m");
        consoleUpdate(NULL);
        
        // –ñ–¥–µ–º –≤–≤–æ–¥
        PadState pad;
        padConfigureInput(1, HidNpadStyleSet_NpadStandard);
        padInitializeDefault(&pad);
        
        while (true) {
            padUpdate(&pad);
            u64 kDown = padGetButtonsDown(&pad);
            
            if (kDown & HidNpadButton_B) {
                inSideMenu = false;
                break;
            }
        }
}

void SimpleGUI::enhanceGames() {
        printf("\x1b[2J\x1b[H");
        printf("\x1b[10;30H–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–≥—Ä...\n");
        consoleUpdate(NULL);
        
        std::vector<GameInfo> games;
        Result rc = scanInstalledGames(games);
        
        if (R_SUCCEEDED(rc) && !games.empty()) {
            printf("\x1b[12;25H–ù–∞–π–¥–µ–Ω–æ –∏–≥—Ä: %zu\n", games.size());
            printf("\x1b[14;25H–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–æ–≤...\n");
            consoleUpdate(NULL);
            
            int processed = 0;
            for (const auto& game : games) {
                if (processed >= 5) break;
                
                printf("\x1b[16;20H–û–±—Ä–∞–±–æ—Ç–∫–∞: %s\n", game.name.c_str());
                consoleUpdate(NULL);
                
                rc = downloadModsForGame(game.titleId);
                if (R_SUCCEEDED(rc)) {
                    processed++;
                }
            }
            
            printf("\x1b[20;25H\x1b[42m\x1b[30m –ì–æ—Ç–æ–≤–æ! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: %d \x1b[0m\n", processed);
        } else {
            printf("\x1b[12;30H\x1b[41m\x1b[37m –ò–≥—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã \x1b[0m\n");
        }
        
        printf("\x1b[40;1H\x1b[37mA - –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å\x1b[0m");
        consoleUpdate(NULL);
        
        // –ñ–¥–µ–º –≤–≤–æ–¥
        PadState pad;
        padConfigureInput(1, HidNpadStyleSet_NpadStandard);
        padInitializeDefault(&pad);
        
        while (true) {
            padUpdate(&pad);
            u64 kDown = padGetButtonsDown(&pad);
            
            if (kDown & HidNpadButton_A) {
                break;
            }
                  }
      }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π GUI
SimpleGUI g_simpleGui;